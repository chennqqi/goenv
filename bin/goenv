#!/bin/sh
read -d '' INFO << TEXT
Filename:    goenv
Version:     1.0.5

Purpose:     To manage your Go (golang) runtime version(s).

Usage:       goenv [ 1.3.3 | persist | init | setup | info | check | version [goenv] | versions [available] | install | uninstall ]

Assumptions: 1) You have homebrew installed

Notes:
1) Run "goenv check" to verify that the $GOPATH and the current Go runtime version are equivalent.
2) If you call "goenv init", it will create $HOME/.goenv that will have the current Go runtime version number.
3) This script uses brew-versions to install old versions of go.
4) There may be problems if you try to install versions 1.1.2 and below.
5) After running "goenv setup", you need to open a new terminal window (or source the current one).
6) No shims.  No rehashing.  Just plain shell commands and some brew.
7) Author: Lex Sheehan

Examples:
  . goenv 1.3.3                        # To switch to version 1.3.3 (you can use any valid Go version)
  . goenv 1.4                          # To switch to version 1.4
  . goenv perisist                     # To persist your go version in the $HOME/.goenv file
  . goenv init                         # To initialize your go environment with the version in the $HOME/.goenv file
  goenv setup                          # To install goenv (only need to do once).  Will be active in subsequent shells.
  goenv info                           # To display goenv information
  goenv help                           # To display goenv help information
  goenv check                          # To verify that your go runtime environment is okay
  goenv version                        # To get the current go runtime version
  goenv version goenv                  # To get the current goenv version
  goenv versions                       # To get a list of locally installed Go versions
  goenv versions available             # To get a list of available Go versions
  goenv install 1.3.3                  # To install version 1.3.3
  goenv uninstall 1.3.3                # To uninstall version 1.3.3
TEXT

USAGE=`echo "$INFO"|grep Usage`
GOENV_VERSION=`echo "$INFO"|grep Version:`
BREW_GO_ROOT=/usr/local/Cellar/go
GOENV_VER_FILE=$HOME/.goenv/version
LATEST_BREW_GO_VER_FILE=$HOME/.goenv/lastest-brew-go-version
GOOD_STATUS="√ All good."
TIP="Don't forget to source goenv when running goenv commands that change your Go version (For more info run $ goenv info)"

function goversion {
    GOTEST=(`go version 2>/dev/null`)
    if [ "$?" != "0" ]; then
        exit 1
    fi
    echo $(go version|cut -d" " -f3|while read n; do echo "${n:2}"; done)
}

function goversions {
    echo "Installed Go versions:"
    brew info go|grep Cellar|grep -v export
}

function current_go_path {
   CURRENT_GO_VERSION=$1
   RET=""
   if [ -z $CURRENT_GO_VERSION ]; then
      echo "No CURRENT_GO_VERSION!"
   else
      RET="$(goversions | grep 1.4.3 | cut -d ' ' -f 1)"
   fi
   echo "$RET"
}

function usage {
    echo $USAGE
}

function lastest_brew_go_version {
    if [ ! -s $LATEST_BREW_GO_VER_FILE ]; then
        echo "`goenv versions available|tail +1|head -n 1|cut -d' ' -f1`" > $LATEST_BREW_GO_VER_FILE
    fi
    cat $LATEST_BREW_GO_VER_FILE
}

function switchtogo_version {
    if [ -s $GOENV_VER_FILE ]; then
        echo `cat $GOENV_VER_FILE`
    else
        echo ""
    fi
}

function goenv_version {
    echo $GOENV_VERSION|cut -d' ' -f2
}

function set_goenv_version {
    echo `goenv_version` > $GOENV_VER_FILE
}


function switchgo {
    VER=$1
    if [ "$VER" == "" ]; then
        echo "switchgo called without passing a go version to switch to."
        return
    fi
    echo "Switching Go to version $VER ..."

    GOVERSIONS=`brew info go|grep Cellar`

    if [[ $GOVERSIONS != *"$VER"* ]]; then
        echo "Requested version ($VER) does not exist locally...Attempting to install from archives..."

        install $VER
    fi

    export GOROOT=$BREW_GO_ROOT/$VER/libexec
    if [[ ! -d $GOROOT ]]; then
        echo "ERROR:  $GOROOT is not a directory!"
        return
    else
        export PATH=$GOROOT/bin:$PATH
    fi

    NEW_GO_BIN=$GOROOT/bin/go
    GO_BINARY=`which go`
    if [[ -e $NEW_GO_BIN ]] && [[ -e $GO_BINARY ]]; then
        brew link --overwrite go  &>/dev/null
        brew switch go $VER &>/dev/null
        echo $VER > $GOENV_VER_FILE
    else
        echo "ERROR:  $NEW_GO_BIN should exist and \$(which go) should be a link."
    fi
    GOBIN=$GOBIN
    if [ "$GOBIN" == "" ]; then
        if [ "$GOPATH" == "" ]; then
            echo "Set GOPATH and try again (to set GOBIN)."
        else
            export GOBIN=$GOPATH/bin
            echo "Exported GOBIN=$GOBIN"
        fi
    fi

}

function install {
    VER=$1
    VER_GITCMD=$(brew versions go|grep "^$VER "|tail -n 1)
    GITCMD=$(echo $VER_GITCMD|cut -d' ' -f2-5)
    if [ -z "$GITCMD" ]; then
        echo "The requrested Go version ($VER) was not found in the archives."
        return
    fi

    HOMEBREW_BASE=$( brew --prefix )
    pushd $HOMEBREW_BASE
    `$GITCMD`
    if [ "$?" != "0" ];then
        echo "Unable to install version ($VER)"
        return
    else
        set -x
        brew unlink go
        brew install go
        { set +x; } 2>/dev/null
    fi
    set_goenv_version
    popd
}

function uninstall {
    VER=$1
    if [[ $BREW_GO_ROOT == *"Cellar"* ]] && [[ -d $BREW_GO_ROOT/$VER ]]; then
        printf "Removing $BREW_GO_ROOT/$VER..."
        rm -rf $BREW_GO_ROOT/$VER
        echo "Done."
    else
        echo "$VER is not installed."
    fi
}

function check {
    tput setab 0
    which go &>/dev/null
    if [ "$?" != "0" ]; then
        tput setaf 1
        printf "ERROR:  Go command not found."
    else
        GOVER=$(goversion)
        if [ "$?" != "0" ]; then
            tput setaf 1
            printf "ERROR:  Go command not found."
        else
            if [[ $GOROOT == *"$GOVER"* ]]; then
                if [ "$GOPATH" == "" ]; then
                    tput setaf 3
                    printf "WARNING: \$GOPATH is not set."
                else
                    if [[ ! -e "$GOPATH" ]]; then
                        tput setaf 3
                        printf "WARNING: \$GOPATH is not a valid directory."
                    else
                        tput setaf 2
                        printf $GOOD_STATUS;
                    fi
                fi
             else
                tput setaf 1
                printf "ERROR: \$GOROOT != Go version"
            fi
        fi
    fi
    tput sgr0
}

if [ "$1" == "-?" ] || [ "$1" == "-h" ] || [ "$1" == "--help" ] || [ "$1" == "help" ]; then
    echo "$INFO"

elif [ "$1" == "init" ]; then
    LATEST_BREW_GO_VER="$(lastest_brew_go_version)"
    if ! which go > /dev/null && [ "$LATEST_BREW_GO_VER" != "" ]; then
        echo ""
        echo "Go is not currently installed but homebrew has a version.  Press Enter to install Go version $LATEST_BREW_GO_VER --or-- CTRL+C to Cancel."
        read x
        install $LATEST_BREW_GO_VER
        echo "GOENV_VER_FILE: $GOENV_VER_FILE"
        echo "$LATEST_BREW_GO_VER" > $GOENV_VER_FILE
    fi

    if [ -s $GOENV_VER_FILE ]; then
        switchgo `cat $GOENV_VER_FILE`
    fi

elif [ "$1" == "persist" ]; then

    VER=`goversion`
    `cat $VER > $GOENV_VER_FILE`

elif [ "$1" == "version" ]; then
    if [ "$2" == "goenv" ] ; then
      echo "`goenv_version`"
    else
      echo `goversion`
    fi

elif [ "$1" == "versions" ]; then
    if [ "$2" == "available" ] ; then
        brew versions go
    else
        echo "`goversions`"
    fi

elif [ "$1" == "upgrade" ]; then
    brew upgrade go

elif [ "$1" == "install" ]; then
    install $2


elif [ "$1" == "uninstall" ]; then
    uninstall $2

elif [ "$1" == "setup" ]; then
    if [ ! -e goenv ]; then
        echo "Copy the goenv script to a directory in your PATH and try again."
        echo ""
        echo "Here's a list of directories in you PATH:"
        echo "$PATH"|tr ":" "\n"
        echo ""
        echo "Also, make goenv executable:  $ chmod +x goenv"
        exit 1
    fi
    printf "\nif which goenv > /dev/null; then . goenv init; fi" >> $HOME/.bashrc


elif [ "$1" == "check" ]; then
    STATUS=`check`
    echo "$STATUS"

    if [ "$STATUS" == "$GOOD_STATUS" ]; then
        exit 0
     else
        echo ""
        echo "Go version: `goversion`"
        echo "\$GOROOT   : $GOROOT"
        echo ""
        echo "$TIP"
        echo ""
        exit 1
    fi

elif [ "$1" == "info" ]; then
    status="$(check)"
    echo "STATUS: $status"
    if [[ ! "$status" == *"√"* ]]; then
        echo "TIP: $TIP"
    fi
    echo "GOROOT: $GOROOT"
    echo "GOPATH: $GOPATH"
    echo "GOBIN : $GOBIN"
    echo "GOOS  : $GOOS"
    echo "GOARCH: $GOARCH"
    echo "Current Go version: `goversion`"
    echo "Latest Brew Go version file: $LATEST_BREW_GO_VER_FILE"
    echo "Latest Brew Go version     : `lastest_brew_go_version`"
    echo "switchtogo version file: $GOENV_VER_FILE"
    echo "switchtogo version     : `switchtogo_version`"
    echo "goenv version: `goenv_version`"
    echo "`goversions`"

elif [[ $1 =~ [0-9]\.[0-9]\.[0-9] ]] || [[ $1 =~ [0-9]\.[0-9] ]]; then

   # set -x
   # trap read debug

    # Accepts versions of format:  Examples: 1.3.3, 1.4
    switchgo $1

else
    usage

fi
